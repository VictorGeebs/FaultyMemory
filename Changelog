# Changelog
All notable changes to this project will be documented in this file.

## [0.1.0] - 2020-07-01
### Added
- Clusters are now in charge of storing the saved and perturbed tensors.
- Tensors can now be added to clusters independently of which module they belong to
- Tensors can be batch-added and batch-removed by module with cluster.add_module() and remove_module()
- Default initializer for clusters and modules in the handler with handler.init_clusters()

### Changed
- All occurences of "model" changed to "module" in non-deprecated classes corrected for consistency
- Cluster's perturb_module and save_module changed to perturb_tensors and save_tensors to better represent the action
- Minor format change of the TODO list

### Deprecated
- Wrappers are now deprecated since memory management is done through the clusters themselves
- the Cluster class is now deprecated, being replaced with TensorCluster. This is temporary and the name TensorCluster will change back to Cluster once Cluster is removed

### Fixed
- Minor formating issue when printing out classes



## [0.1.1] - 2020-07-02
### Added
- Clusters now handle hooking for activations themselves
- There is no longer a differentiation between Perturbations for only tensors or activations
- Handler access for the new cluster activation functions 

### Changed
- The old "TensorCluster" class is now called "Cluster" with the removal of the old Cluster class

### Removed
- Wrappers have been removed
- Activation Perturbations have been removed, they are now all simply Perturbations

## [0.1.2] - 2020-07-13
### Added
- Handler can now be initialized with activations to perturb and entire networks to simplify the init process
- Handler can now be __call__(x) to use it like a network's forward(x)
- Utility functions have been added to train, test and generate test data for networks
- The train.py file can be used as a template to train new networks quickly
- The models folder has been added to contain trained models for testing perturbations or algorithms
- Sign bit inverter perturbation added 

## [0.1.3] - 2020-07-29
### Added
- Different representations can now be used to represent the weights and activations of the network
- Current reprensentations: uint and int of all widths, binary representation
- Representations can be assigned to both Clusters and Tensors for a more granular access

### Changed
- Overhaul of the perturbation process to reduce compute time
- Test functions now perturb the network once and run tests instead of modifying the network each time to save time

## [0.1.4] - 2020-08-04
### Added
- Added base for Json loader
- Added by-string constructors for representations and perturbations
- Added a register of all tensors, their representation and their perturbations within the handler to be able to assign them to clusters
- Added a profiles folder to store Json profiles

### Changed
- Clusters are no longer directly in charge of tensors, they are now only used to group tensors if the user desires to
- Representations are now in their own file, representations.py

## [0.1.5] - 2020-08-04
### Added
- Hooks for activations are now their own objects
- Support for activations in Json loader

### Changed
- Overhaul of architecture and dataflow
- The handler now stores and backs up all the relevant data for tensors and activations
- In this version, Clusters are virtually useless, but will be used to create correlations in the future